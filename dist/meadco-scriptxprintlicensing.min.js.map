{"version":3,"file":"meadco-scriptxprintlicensing.min.js","names":["extendMeadCoNamespace","moduleversion","apiLocation","licenseGuid","licenseRevision","licensePath","lastError","license","connectToServer","serverUrl","slicenseGuid","p","MeadCo","ScriptX","Print","connectLite","console","error","getSubscriptionFromServer","resolve","reject","msg","Error","length","requestService","data","errorText","warn","applyLicense","revision","path","log","lcasePath","toLowerCase","URL","window","location","href","requestData","Guid","Url","Revision","company","version","connect","apply","applyAsync","result","validLicense","guid","errorMessage","detailOnError","License","e","GetLicenseAsync","PolyfillInit","PolyfillInitAsync"],"sources":["meadco-scriptxprintlicensing.js"],"mappings":"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","ignoreList":[],"sourcesContent":["/** \r\n * MeadCo.ScriptX.Print.Licensing\r\n *\r\n * A static class wrapping calls to the server API to install / manage a client \r\n * license for ScriptX.Services for Windows PC. \r\n * \r\n * The purpose of these libraries is to assist those with a body of client javascript code targetting use of the ScriptX Add-On for Internet Explorer. These libraries assist with continuing with a large part of the code\r\n * intact when transitioning to using ScriptX.Services instead/as well.\r\n * \r\n * This module is only required when working with ScriptX Services for Windows PC.\r\n * \r\n * A license must be 'applied' to the current html document/window before calls to printing APIs that \r\n * use the license can be made.\r\n *\r\n * This module is NOT required when working with Cloud or On Premise services as the license\r\n * installation and management occurs at the server. \r\n *\r\n * Requires: meadco-core.js\r\n * \r\n * @namespace MeadCoScriptXPrintLicensing\r\n * \r\n */\r\n\r\n; (function (name, definition) {\r\n    extendMeadCoNamespace(name, definition);\r\n})('MeadCo.ScriptX.Print.Licensing', function () {\r\n    const moduleversion = \"1.15.2.0\";\r\n    const apiLocation = \"v1/licensing\";\r\n\r\n    let licenseGuid = \"\";\r\n    let licenseRevision = 0;\r\n    let licensePath = \"\"; // \"\" => subscription (cloud) not client for Workstation, => value for client license\r\n    let lastError = \"No license applied\";\r\n    let applyInProgress = false;\r\n\r\n    const module = this;\r\n\r\n    /**\r\n     * The capabilities that can be licensed.\r\n     * \r\n     * @memberof MeadCoScriptXPrintLicensing\r\n     * @typedef LicenseOptions \r\n     * \r\n     * @property {boolean} basicHtmlPrinting True if Add-on compatible basic html printing is available (always true)\r\n     * @property {boolean} advancedPrinting True if Add-on compatible advanced html printing features are available\r\n     * @property {boolean} enhancedFormatting True if Add-on compatible enhanced formatting is available\r\n     * @property {boolean} printPdf True if printing PDF files is available\r\n     * @property {boolean} printRaw True if Raw printing is available\r\n     * */\r\n    var LicenseOptions; // for doc generator\r\n\r\n    /**\r\n     * License details \r\n     * @memberof MeadCoScriptXPrintLicensing\r\n     * @typedef license\r\n     * \r\n     * @property {string} guid The unique id of the license\r\n     * @property {string} company The name of the license owner\r\n     * @property {string} companyHomePage Url of company home page \r\n     * @property {Date} from Date license is valid from\r\n     * @property {Date} to Date license is vaid till \r\n     * @property {LicenseOptions} options The options enabled by the license\r\n     * @property {Array.string} domains the domains the license can be used from\r\n     * */\r\n    var license = {};\r\n\r\n    function connectToServer(serverUrl, slicenseGuid) {\r\n        // a licensing call may be made first, if the print module is available, inform it.\r\n        var p = MeadCo.ScriptX.Print;\r\n        if (typeof p !== \"undefined\" && typeof p.connectLite === \"function\") {\r\n            p.connectLite(serverUrl, slicenseGuid);\r\n        }\r\n        else {\r\n            console.error(\"MeadCo.ScriptX.Print is not available\");\r\n        }\r\n\r\n        licenseGuid = slicenseGuid;\r\n        license = {};\r\n        lastError = \"No license applied\";\r\n        licenseRevision = 0;\r\n        licensePath = \"\";\r\n    }\r\n\r\n    function getSubscriptionFromServer(resolve, reject) {\r\n        const p = MeadCo.ScriptX.Print;\r\n        if (typeof p == \"undefined\" || typeof p.connectLite !== \"function\") {\r\n            var msg = \"MeadCo.ScriptX.Licensing : MeadCo.ScriptX.Print API not available\"\r\n            if (typeof reject === \"function\") {\r\n                reject(msg);\r\n                return;\r\n            }\r\n            throw new Error(msg);\r\n        }\r\n\r\n        if (license.length > 0) {\r\n            if (typeof resolve === \"function\") {\r\n                resolve(license);\r\n            }\r\n            return license;\r\n        }\r\n\r\n        p.requestService(apiLocation, \"GET\", {}, true, typeof resolve === \"function\",\r\n            function (data) {\r\n                lastError = \"\";\r\n                license = { ...license, ...data };\r\n                if (typeof resolve === \"function\") {\r\n                    resolve(license);\r\n                    return;\r\n                }\r\n            },\r\n            function (errorText) {\r\n                lastError = errorText;\r\n                if (typeof reject === \"function\") {\r\n                    reject(lastError);\r\n                    return;\r\n                }\r\n                MeadCo.warn(\"No reject function for: \" + lastError);\r\n            }\r\n        );\r\n        return license;\r\n    }\r\n\r\n    function applyLicense(slicenseGuid, revision, path, resolve, reject) {\r\n\r\n        MeadCo.log(\"Apply license: \" + slicenseGuid + \",revision: \" + revision + \", path: \" + path);\r\n\r\n        const p = MeadCo.ScriptX.Print;\r\n        if (typeof p == \"undefined\" || typeof p.connectLite !== \"function\") {\r\n            var msg = \"MeadCo.ScriptX.Licensing : MeadCo.ScriptX.Print API not available\"\r\n            if (typeof reject === \"function\") {\r\n                reject(msg);\r\n                return;\r\n            }\r\n            MeadCo.warn(\"No reject function for: \" + msg);\r\n        }\r\n\r\n        const lcasePath = path.toLowerCase();\r\n        if (lcasePath !== \"warehouse\" && lcasePath !== \"securewarehouse\") {\r\n            const url = new URL(path, window.location.href);\r\n            path = url.href;\r\n\r\n            MeadCo.log(\"path updated to: \" + path);\r\n        }\r\n\r\n        licenseGuid = slicenseGuid;\r\n        const requestData = {\r\n            Guid: slicenseGuid,\r\n            Url: path,\r\n            Revision: revision\r\n        };\r\n\r\n        p.requestService(apiLocation, \"POST\", requestData, false, typeof resolve === \"function\",\r\n            function (data) {\r\n                lastError = \"\";\r\n                license = { ...license, ...data };\r\n                if (typeof resolve === \"function\") {\r\n                    resolve(license);\r\n                    return;\r\n                }\r\n            },\r\n            function (errorText) {\r\n                lastError = errorText;\r\n                if (typeof reject === \"function\") {\r\n                    reject(lastError);\r\n                    return;\r\n                }\r\n            });\r\n\r\n        if (typeof resolve !== \"function\") {\r\n            MeadCo.log(\"returning applied (sync) license: \" + license.company);\r\n            return license;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    MeadCo.log(\"MeadCo.ScriptX.Print.Licensing \" + moduleversion + \" loaded.\");\r\n\r\n    //////////////////////////////////////////////////\r\n    // public API\r\n    return {\r\n        /**\r\n         * Get the version of this module as a string major.minor.hotfix.build\r\n         * @property {string} version\r\n         * @memberof MeadCoScriptXPrintLicensing\r\n         */\r\n        get version() {\r\n            return moduleversion;\r\n        },\r\n\r\n        /**\r\n         * Specify the server to use and the license Guid. \r\n         * \r\n         * @function connect\r\n         * @memberof MeadCoScriptXPrintLicensing\r\n         * @param {string} serverUrl the 'root' url to the server (the api path will be added by the library)\r\n         * @param {string} slicenseGuid the license GUID as provided by MeadCo. Optional unless will call GetLicenseAsync() without calling apply\r\n         */\r\n        connect: function (serverUrl, slicenseGuid) {\r\n            connectToServer(serverUrl, slicenseGuid);\r\n        },\r\n\r\n        /**\r\n         * Specify the server to use and the license Guid in order to get details on the license via the License property\r\n         * or function GetLicenseAsync() \r\n         *\r\n         * @memberof MeadCoScriptXPrintLicensing\r\n         * @function connectLite\r\n         * @memberof MeadCoScriptXPrintLicensing\r\n         * @param {string} serverUrl the 'root' url to the server (the api path will be added by the library)\r\n         * @param {string} slicenseGuid the license GUID as provided by MeadCo. Optional unless will call GetLicenseAsync() without calling apply\r\n         * @param {number} revision the revision number of the licsnse as provided by MeadCo.\r\n         * @param {string} path fully qualified path to the license file (.mlf file). Use the value 'warehouse' to download from the public MeadCo License warehouse\r\n         *\r\n         */\r\n        connectLite: function (serverUrl, slicenseGuid, revision, path) {\r\n            connectToServer(serverUrl, slicenseGuid);\r\n            licenseRevision = revision;\r\n            licensePath = path;\r\n        },\r\n\r\n        /**\r\n         * Apply (make usable) the MeadCo ScriptX Client license for use with this content. If the license is not already cached it will be downloaded and cached. \r\n         * It is strongly suggested you request that the silent option is enabled in the license (it is by default for ScriptX.Services for Windows PC licenses)\r\n         * \r\n         * The license must list the url of the content to which it is being applied.\r\n         * \r\n         * This call is synchronous and therefore not recommended. Use applyAsync()         \r\n         * \r\n         * @memberof MeadCoScriptXPrintLicensing\r\n         * @function apply\r\n         * @param {string} licenseGuid the license GUID as provided by MeadCo.\r\n         * @param {number} revision the revision number of the licsnse as provided by MeadCo.\r\n         * @param {string} path fully qualified path to the license file (.mlf file). Use the value 'warehouse' to download from the public MeadCo License warehouse\r\n         * @returns {license} details the license that was sucessfully applied, null if none available\r\n         */\r\n        apply: function (licenseGuid, revision, path) {\r\n            return applyLicense(licenseGuid, revision, path);\r\n        },\r\n\r\n        /**\r\n         * Apply (make usable) the MeadCo ScriptX Client license for use with this content. If the license is not already cached it will be downloaded and cached.\r\n         * It is strongly suggested you request that the silent option is enabled in the license (it is by default for ScriptX.Services for Windows PC licenses)\r\n         *\r\n         * The license must list the url of the content to which it is being applied.\r\n         *\r\n         * @memberof MeadCoScriptXPrintLicensing\r\n         * @function applyAsync\r\n         * @param {string} licenseGuid the license GUID as provided by MeadCo.\r\n         * @param {number} revision the revision number of the licsnse as provided by MeadCo.\r\n         * @param {string} path fully qualified path to the license file (.mlf file). Use the value 'warehouse' to download from the public MeadCo License warehouse\r\n\r\n         * @param {function({license})} resolve function to call on success\r\n         * @param {function({string})} reject function to call on failure with reason for failure\r\n         */\r\n        applyAsync: function (licenseGuid, revision, path, resolve, reject) {\r\n            applyLicense(licenseGuid, revision, path, resolve, reject);\r\n        },\r\n\r\n        /**\r\n         * Get the result code for the last attempt to apply a license.\r\n         * \r\n         * Basically faked for the benefit of code compatibility with the add-on\r\n         * \r\n         * @property {number} result\r\n         * @memberof MeadCoScriptXPrintLicensing         \r\n         * \r\n         */\r\n        get result() {\r\n            return lastError === \"\" ? 0 : 5; // => ok or not found\r\n        },\r\n\r\n        /**\r\n         * Get whether a license has been applied successfully\r\n         * \r\n         * @property {boolean} validLicense\r\n         * @memberof MeadCoScriptXPrintLicensing\r\n         *\r\n         */\r\n        get validLicense() {\r\n            return typeof license.guid !== \"undefined\";\r\n        },\r\n\r\n        /**\r\n         * Get the text of the last error.\r\n         * \r\n         * @property {string} errorMessage\r\n         * @memberof MeadCoScriptXPrintLicensing\r\n         * \r\n         */\r\n        get errorMessage() {\r\n            return lastError;\r\n        },\r\n\r\n        get detailOnError() {\r\n            return lastError;\r\n        },\r\n\r\n        /**\r\n         * Get the details on the connected license. If it hasnt been applied yet, then query\r\n         * for the details (but dont apply it and connectLite() MUST have been called).\r\n         * \r\n         * Warning this function is synchronous, GetLicenseAsync() should be used.\r\n         *\r\n         * @property {license} License\r\n         * @memberof MeadCoScriptXPrintLicensing\r\n         * \r\n         */\r\n        get License() {\r\n            var l = typeof license.guid !== \"undefined\" ? license : getSubscriptionFromServer(null, function (e) {\r\n                throw new Error(e)\r\n            });\r\n            return l;\r\n        },\r\n\r\n        /**\r\n         * Get the details on the connected license. If it hasnt been applied yet, then query\r\n         * for the details (but dont apply it and connectLite() MUST have been called).\r\n         *\r\n         * @memberof MeadCoScriptXPrintLicensing\r\n         * @function GetLicenseAsync\r\n         * @param {function({license})} resolve function to call on success\r\n         * @param {function({string})} reject function to call on failure with reason for failure\r\n         */\r\n        GetLicenseAsync: function (resolve, reject) {\r\n            getSubscriptionFromServer(resolve, reject);\r\n        },\r\n\r\n        // helpers for wrapper MeadCoJS - we apply the license here when working\r\n        // with ScriptX Services for Windows PC\r\n        PolyfillInit: function () {\r\n            if (typeof license.guid !== \"undefined\") {\r\n                return true;\r\n            }\r\n\r\n            if (licenseGuid === \"\")\r\n                return false;\r\n\r\n            if (licensePath === \"\") //subscription only\r\n                return true;\r\n\r\n            applyLicense(licenseGuid, licenseRevision, licensePath);\r\n            return typeof license.guid !== \"undefined\";\r\n        },\r\n\r\n        PolyfillInitAsync: function (resolve, reject) {\r\n            if (typeof license.guid !== \"undefined\" || licensePath === \"\") {\r\n                resolve(license);\r\n            }\r\n            else\r\n                applyLicense(licenseGuid, licenseRevision, licensePath, resolve, reject);\r\n        }\r\n    };\r\n\r\n});\r\n"]}