{"version":3,"file":"meadco-core.min.js","names":["name","definition","theModule","outerScope","this","version","bLog","MeadCo","logEnable","bUseFetch","useFetch","log","str","console","warn","error","parseError","logText","jqXhr","textStatus","errorThrown","responseText","statusText","responseJSON","Message","length","extendMeadCoNamespace","namespaces","split","scope","jQuery","ender","$","i","packageName","oldscope","newscope","prop","hasOwnProperty","logEnabled","bEnable","fetchEnabled","createNS","namespace","nsparts","parent","slice","partname","s","makeApiEndPoint","serverUrl","apiLocation","p","indexOf","lastIndexOf","substring","makeServiceEndPoint","endPoint","parseAjaxError","parseFetchError","msg","message"],"sources":["meadco-core.js"],"mappings":"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","ignoreList":[],"sourcesContent":["/**\r\n * Static class for namespace creation and core utility functions for ScriptX.Services client libraries.\r\n * \r\n * This must be included before any other files from this package.\r\n * \r\n * The implementation is for use in a browser only, not general runtime javascript environments.\r\n * \r\n * This code is necessarily 'old-fashioned' as it may find itself running in old versions of IE.\r\n *  \r\n * @namespace MeadCo\r\n */\r\n\r\n; (function (name, definition) {\r\n    var theModule = definition();\r\n\r\n    // var scope = (this.jQuery || this.ender || this.$ || this);\r\n    // we always go for window\r\n    var scope = this;\r\n\r\n    // hack ...\r\n    //\r\n    // MeadCo.ScriptX and MeadCo.Licensing may already be defined\r\n    // when we run -- they would happily extend this implementation\r\n    // and we should extend theirs. This is a horible way to do it.\r\n    //\r\n    var oldscope = null;\r\n    if (typeof scope[name] !== 'undefined') {\r\n        // console.log(name + \" already exists\");\r\n        oldscope = scope[name];\r\n    }\r\n\r\n    scope[name] = theModule;\r\n\r\n    if (oldscope !== null) {\r\n        var newscope = scope[name];\r\n\r\n        // console.log(\"preserving old scope ... \");\r\n        for (var prop in oldscope) {\r\n            if (oldscope.hasOwnProperty(prop)) {\r\n                // console.log(\"will preserve: \" + prop);\r\n                newscope[prop] = oldscope[prop];\r\n            }\r\n        }\r\n    }\r\n\r\n    // this is moderately poor .. assuming this code is executing\r\n    // as the root of the name space, which it is and assumes\r\n    // it implements inheritable extendNamespace(), which it does.\r\n    // For all that, it means that the root gets to decide where this\r\n    // is (i.e. in a common namespace or the global object)\r\n    theModule.scope = scope;\r\n\r\n})('MeadCo', function () {\r\n\r\n    // protected API\r\n    var outerScope = this;\r\n    var version = \"1.16.0.0\"; // matches the highest version number of sub-classes.\r\n    var bLog = ((typeof (MeadCo) !== \"undefined\" && typeof (MeadCo.logEnable) !== \"undefined\")) ? MeadCo.logEnable : false;\r\n    var bUseFetch = ((typeof (MeadCo) !== \"undefined\" && typeof (MeadCo.useFetch) !== \"undefined\")) ? MeadCo.useFetch : false;\r\n\r\n    var log = function (str) {\r\n        if (bLog) {\r\n            console.log(\"MeadCo :: \" + str);\r\n        }\r\n    };\r\n\r\n    var warn = function (str) {\r\n        console.warn(\"MeadCo :: \" + str);\r\n    };\r\n\r\n    var error = function (str) {\r\n        console.error(\"MeadCo :: \" + str);\r\n    };\r\n\r\n    // extend the namespace\r\n    outerScope.extendMeadCoNamespace = function (name, definition) {\r\n        var theModule = definition()\r\n\r\n        log(\"MeadCo root extending namespace: \" + name);\r\n        // walk/build the namespace part by part and assign the module to the leaf\r\n        var namespaces = name.split(\".\");\r\n        var scope = (outerScope.scope || this.jQuery || this.ender || this.$ || this);\r\n        for (var i = 0; i < namespaces.length; i++) {\r\n            var packageName = namespaces[i];\r\n            if (i === namespaces.length - 1) {\r\n                if (typeof scope[packageName] === \"undefined\") {\r\n                    log(\"installing implementation at: \" + packageName);\r\n                    scope[packageName] = theModule;\r\n                } else {\r\n                    log(\"Warning - extending package: \" + packageName);\r\n                    var oldscope = scope[packageName];\r\n                    scope[packageName] = theModule;\r\n\r\n                    var newscope = scope[packageName];\r\n\r\n                    log(\"preserving old scope ... \");\r\n                    for (var prop in oldscope) {\r\n                        if (oldscope.hasOwnProperty(prop)) {\r\n                            log(\"will preserve: \" + prop);\r\n                            newscope[prop] = oldscope[prop];\r\n                        }\r\n                    }\r\n                }\r\n            } else if (typeof scope[packageName] === \"undefined\") {\r\n                log(\"initialising new: \" + packageName);\r\n                scope[packageName] = {};\r\n            } else {\r\n                log(\"using existing package: \" + packageName);\r\n            }\r\n            scope = scope[packageName];\r\n        }\r\n    };\r\n\r\n    /*\r\n     * Extract the error text from jQuery AJAX response\r\n     * \r\n     * @param {string} logText The lead-in text for a console.log entry\r\n     * @param {object} jqXhr jQuery ajax header\r\n     * @param {string} textStatus textStatus result determined by jQuery\r\n     * @param {string} errorThrown The server exception dewtermined by jQuery\r\n     * @returns {string} The error text to display\r\n     */\r\n    function parseError(logText, jqXhr, textStatus, errorThrown) {\r\n        error(\"**warning: AJAX call failure in \" + logText + \": [\" +\r\n            textStatus +\r\n            \"], [\" +\r\n            errorThrown +\r\n            \"], [\" +\r\n            jqXhr.responseText +\r\n            \"], [\" +\r\n            jqXhr.statusText +\r\n            \"]\");\r\n\r\n        if (errorThrown === \"\" || errorThrown === \"Internal Server Error\") {\r\n            if (textStatus !== \"error\") {\r\n                errorThrown = jqXhr.responseText || textStatus;\r\n            }\r\n            else {\r\n                if (typeof jqXhr.responseJSON === \"object\" && typeof jqXhr.responseJSON.Message === \"string\") {\r\n                    errorThrown = jqXhr.responseJSON.Message;\r\n                }\r\n                else {\r\n                    if (typeof jqXhr.responseText === \"string\") {\r\n                        errorThrown = jqXhr.responseText;\r\n                    }\r\n                    else\r\n                        errorThrown = \"Server or network error\";\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (typeof jqXhr.responseJSON !== \"object\" && typeof jqXhr.responseText === \"string\" && jqXhr.responseText.length > 0) {\r\n                errorThrown = jqXhr.responseText;\r\n            }\r\n        }\r\n\r\n        error(\" error parsed to --> [\" + errorThrown + \"]\");\r\n        return errorThrown;\r\n    }\r\n\r\n    log(\"MeadCo root namespace \" + version + \" loaded.\");\r\n\r\n    // public API.\r\n    return {\r\n        /**\r\n         * Sends the content to the console (if informational logging is enabled)\r\n         * @function log\r\n         * @memberof MeadCo\r\n         * @param {string} text to send to console\r\n         */\r\n        log: log,\r\n\r\n        /**\r\n         * Marks the content as a warning and sends to the console \r\n         * @function warn\r\n         * @memberof MeadCo\r\n         * @param {string} text to send to console\r\n         */\r\n        warn: warn,\r\n\r\n        /**\r\n         * Marks the content as an error and sends to the console \r\n         * @function error\r\n         * @memberof MeadCo \r\n         * @param {string} text to send to console\r\n         */\r\n        error: error,\r\n\r\n        /**\r\n         * Get the version of this module as a string major.minor.hotfix.build\r\n         * @property {string} version\r\n         * @memberof MeadCo\r\n         */\r\n        get version() { return version; },\r\n\r\n        /**\r\n         * Get/set state of logging to console of informational messages. Default is off\r\n         * @property {boolean} logEnabled\r\n         * @memberof MeadCo\r\n         */\r\n        get logEnabled() { return bLog; },\r\n        set logEnabled(bEnable) {\r\n            bLog = bEnable;\r\n        },\r\n\r\n        /**\r\n         * Get/set state of forcing use of fetch even if jQuery(.ajax) is available. Default is off\r\n         * @property {boolean} logEnabled\r\n         * @memberof MeadCo         * \r\n         */\r\n        get fetchEnabled() { return bUseFetch; },\r\n        set fetchEnabled(bEnable) {\r\n            bUseFetch = bEnable;\r\n        },\r\n\r\n        /**\r\n         * Create a namespace\r\n         * @function createNS\r\n         * @memberof MeadCo\r\n         * @param {string} namespace path of the namespace\r\n         * @returns {object} static object for the namespace\r\n         * @example\r\n         * var ui = MeadCo.createNS(\"MeadCo.ScriptX.Print.UI\");\r\n         * ui.Show = function() { alert(\"hello\"); }\r\n         */\r\n        createNS: function (namespace) {\r\n            var nsparts = namespace.split(\".\");\r\n            var parent = outerScope.scope.MeadCo;\r\n\r\n            // we want to be able to include or exclude the root namespace so we strip\r\n            // it if it's in the namespace\r\n            if (nsparts[0] === \"MeadCo\") {\r\n                nsparts = nsparts.slice(1);\r\n            }\r\n\r\n            // loop through the parts and create a nested namespace if necessary\r\n            for (var i = 0; i < nsparts.length; i++) {\r\n                var partname = nsparts[i];\r\n                // check if the current parent already has the namespace declared\r\n                // if it isn't, then create it\r\n                if (typeof parent[partname] === \"undefined\") {\r\n                    parent[partname] = {};\r\n                }\r\n                // get a reference to the deepest element in the hierarchy so far\r\n                parent = parent[partname];\r\n            }\r\n            // the parent is now constructed with empty namespaces and can be used.\r\n            // we return the outermost namespace\r\n            return parent;\r\n        },\r\n\r\n        /**\r\n         * @private\r\n         * @param {object} s the scope in which to create namesapces\r\n         */\r\n        set scope(s) { outerScope.scope = s; },\r\n\r\n        /**\r\n         * Get the url to a ScriptX.Services api. If an api is already present, it is replaced.\r\n         * \r\n         * @function makeApiEndPoint\r\n         * @memberof MeadCo\r\n         * @param {string} serverUrl url to the server\r\n         * @param {string} apiLocation the api, e.g. v1/printhtml\r\n         * @returns {string} url to the api\r\n         */\r\n        makeApiEndPoint: function (serverUrl, apiLocation) {\r\n            // check if given partial ...\r\n            var p = serverUrl.indexOf(\"/api\");\r\n            if (p === -1) {\r\n                if (serverUrl.lastIndexOf(\"/\") !== (serverUrl.length - 1)) {\r\n                    serverUrl += \"/\";\r\n                }\r\n                serverUrl += \"api/\" + apiLocation;\r\n            }\r\n            else {\r\n                // given another api, chop and replace with requested api\r\n                serverUrl = serverUrl.substring(0, p) + \"/api/\" + apiLocation;\r\n            }\r\n            return serverUrl;\r\n        },\r\n\r\n        /**\r\n         * Get the url to a ScriptX.Services service endpoint. \r\n         * \r\n         * @function makeServiceEndPoint\r\n         * @memberof MeadCo\r\n         * @param {string} serverUrl url to the server\r\n         * @param {string} endPoint the service endpoint, e.g. v1/preview\r\n         * @returns {string} url to the endpoint\r\n         */\r\n        makeServiceEndPoint: function (serverUrl, endPoint) {\r\n            // check if given partial ...\r\n            var p = serverUrl.indexOf(\"/api\");\r\n            if (p === -1) {\r\n                if (serverUrl.lastIndexOf(\"/\") !== (serverUrl.length - 1)) {\r\n                    serverUrl += \"/\";\r\n                }\r\n                serverUrl += endPoint;\r\n            }\r\n            else {\r\n                // given another api, chop and replace with requested api\r\n                serverUrl = serverUrl.substring(0, p) + \"/\" + endPoint;\r\n            }\r\n            return serverUrl;\r\n        },\r\n\r\n\r\n        /**\r\n         * Extract the error text from jQuery AJAX response\r\n         * \r\n         * @function parseAjaxError\r\n         * @memberof MeadCo\r\n         * \r\n         * @param {string} logText The lead-in text for a console.log entry\r\n         * @param {object} jqXhr jQuery ajax header\r\n         * @param {string} textStatus textStatus result determined by jQuery\r\n         * @param {string} errorThrown The server exception dewtermined by jQuery\r\n         * @returns {string} The error text to display\r\n         */\r\n        parseAjaxError: function (logText, jqXhr, textStatus, errorThrown) {\r\n            return parseError(logText, jqXhr, textStatus, errorThrown);\r\n        },\r\n\r\n        /**\r\n         * Extract the error text from browser fetch response\r\n         * \r\n         * @function parseFetchError\r\n         * @memberof MeadCo\r\n         * \r\n         * @param {object} errorThrown error caught from fetch \r\n         * @returns {string} The error text to display\r\n         */\r\n        parseFetchError: function (logText, errorThrown) {\r\n            const msg = typeof errorThrown === \"string\" ? errorThrown : errorThrown.message;\r\n            error(\"**warning: FETCH call failure in \" + logText + \": \" + msg);\r\n            return msg;\r\n        }\r\n    };\r\n\r\n});\r\n\r\n\r\n"]}